{"ast":null,"code":"var DateMapping = /** @class */function () {\n  function DateMapping(monthsLengthFlags, gy, gm, gd) {\n    this.hijriMonthsLengthFlags = monthsLengthFlags;\n    this.gregorianDate = new Date(gy, gm, gd);\n  }\n  return DateMapping;\n}();\nvar DatePart;\n(function (DatePart) {\n  DatePart[DatePart[\"Year\"] = 0] = \"Year\";\n  DatePart[DatePart[\"DayOfYear\"] = 1] = \"DayOfYear\";\n  DatePart[DatePart[\"Month\"] = 2] = \"Month\";\n  DatePart[DatePart[\"Day\"] = 3] = \"Day\";\n})(DatePart || (DatePart = {}));\nvar DatePart$1 = DatePart;\n\n// Parts of this file are (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n// https://github.com/felixge/node-dateformat/blob/master/lib/dateformat.js\nvar token = /d{1,4}|M{1,4}|yy(?:yy)?|([HhmsTt])\\1?|[LlSWN]|\"[^\"]*\"|'[^']*'/g;\nfunction pad(val, locale, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return locale.localizeNum(val);\n}\nfunction format(date, mask, locale, hy, hm, hd, woy, dow) {\n  mask = String(locale.masks[mask] || mask || locale.masks.default);\n  var _ = 'get';\n  var d = hd;\n  var D = date[_ + 'Day']();\n  var m = hm;\n  var y = hy;\n  var H = date[_ + 'Hours']();\n  var M = date[_ + 'Minutes']();\n  var s = date[_ + 'Seconds']();\n  var L = date[_ + 'Milliseconds']();\n  var W = woy;\n  var N = dow;\n  var flags = {\n    d: locale.localizeNum(d),\n    dd: pad(d, locale),\n    ddd: locale.dayNamesShort[D],\n    dddd: locale.dayNames[D],\n    M: locale.localizeNum(m),\n    MM: pad(m, locale),\n    MMM: locale.monthNamesShort[m - 1],\n    MMMM: locale.monthNames[m - 1],\n    yy: locale.localizeNum(String(y).slice(2)),\n    yyyy: locale.localizeNum(y),\n    h: locale.localizeNum(H % 12 || 12),\n    hh: pad(H % 12 || 12, locale),\n    H: locale.localizeNum(H),\n    HH: pad(H, locale),\n    m: locale.localizeNum(M),\n    mm: pad(M, locale),\n    s: locale.localizeNum(s),\n    ss: pad(s, locale),\n    l: pad(L, locale, 3),\n    L: pad(Math.round(L / 10), locale),\n    t: H < 12 ? locale.timeNames[0] : locale.timeNames[1],\n    tt: H < 12 ? locale.timeNames[2] : locale.timeNames[3],\n    T: H < 12 ? locale.timeNames[4] : locale.timeNames[5],\n    TT: H < 12 ? locale.timeNames[6] : locale.timeNames[7],\n    S: locale.localizeDayNum(d),\n    W: locale.localizeNum(W),\n    N: locale.localizeNum(N)\n  };\n  return locale.localizeCommas(mask.replace(token, function (match) {\n    return flags[match];\n  }));\n}\nvar symbolMap = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];\nvar dayNumMap = ['الأول', 'الثاني', 'الثالث', 'الرابع', 'الخامس', 'السادس', 'السابع', 'الثامن', 'التاسع', 'العاشر', 'الحادي عشر'];\nvar ar = {\n  name: 'ar',\n  rtl: true,\n  dayNamesShort: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],\n  dayNames: ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],\n  monthNamesShort: ['محرم', 'صفر', 'ربيع ١', 'ربيع ٢', 'جمادى ١', 'جمادى ٢', 'رجب', 'شعبان', 'رمضان', 'شوال', 'ذو القعدة', 'ذو الحجة'],\n  monthNames: ['محرم', 'صفر', 'ربيع الأول', 'ربيع الثاني', 'جمادى الأولى', 'جمادى الآخرة', 'رجب', 'شعبان', 'رمضان', 'شوال', 'ذو القعدة', 'ذو الحجة'],\n  timeNames: ['ص', 'م', 'ص', 'م', 'ص', 'م', 'ص', 'م'],\n  masks: {\n    default: 'ddd dd MMM yyyy HH:mm:ss',\n    shortDate: 'yy/M/d',\n    mediumDate: 'd MMM, yyyy',\n    longDate: 'd MMMM, yyyy',\n    fullDate: 'dddd, d MMMM, yyyy',\n    shortTime: 'h:mm TT',\n    mediumTime: 'h:mm:ss TT',\n    longTime: 'h:mm:ss.l TT'\n  },\n  localizeNum: function (num) {\n    var s = String(num);\n    var output = '';\n    for (var i = 0; i < s.length; i++) {\n      output += symbolMap[s.charAt(i)];\n    }\n    return output;\n  },\n  localizeDayNum: function (d) {\n    var output = '';\n    if (d === 11) {\n      output = 'الحادي عشر';\n    } else if (d === 20) {\n      output = 'العشرون';\n    } else if (d === 30) {\n      output = 'الثلاثون';\n    } else {\n      output = dayNumMap[d - 1];\n    }\n    var section = d / 10;\n    if (section > 1.1 && section < 2) {\n      output = dayNumMap[(d - 1) % 10] + ' عشر';\n    } else if (section > 2 && section < 3) {\n      output = dayNumMap[(d - 1) % 10] + ' والعشرون';\n    }\n    return output + ' من';\n  },\n  localizeCommas: function (v) {\n    return v.replace(/,/g, '،');\n  }\n};\nvar en = {\n  name: 'en',\n  dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  monthNamesShort: ['Muh', 'Ṣaf', 'Rab-I', 'Rab-II', 'Jum-I', 'Jum-II', 'Raj', 'Sha', 'Ram', 'Shw', 'Dhū-Q', 'Dhū-Ḥ'],\n  monthNames: ['Muharram', 'Ṣafar', 'Rabīʿ al-Awwal', 'Rabīʿ ath-Thānī', 'Jumādá al-Ūlá', 'Jumādá al-Ākhirah', 'Rajab', 'Sha‘bān', 'Ramaḍān', 'Shawwāl', 'Dhū al-Qa‘dah', 'Dhū al-Ḥijjah'],\n  timeNames: ['a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'],\n  masks: {\n    default: 'ddd MMM dd yyyy HH:mm:ss',\n    shortDate: 'M/d/yy',\n    mediumDate: 'MMM d, yyyy',\n    longDate: 'MMMM d, yyyy',\n    fullDate: 'dddd, MMMM d, yyyy',\n    shortTime: 'h:mm TT',\n    mediumTime: 'h:mm:ss TT',\n    longTime: 'h:mm:ss.l TT'\n  },\n  localizeNum: function (num) {\n    return String(num);\n  },\n  // @ts-ignore\n  localizeDayNum: function (d) {\n    return ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 !== 10) * d % 10];\n  },\n  localizeCommas: function (v) {\n    return v;\n  }\n};\n\n/// Calendar support range:\n///     Calendar    Minimum     Maximum\n///     ==========  ==========  ==========\n///     Gregorian   1900/04/30  2077/11/16\n///     UmAlQura    1318/01/01  1500/12/30\nvar UmAlQuraStatic = /** @class */function () {\n  function UmAlQuraStatic() {}\n  /**\r\n   * Coverts the given Hijri date to Gregorian.\r\n   * @param hy The Hijri year\r\n   * @param hm The Hijri month\r\n   * @param hd The Hijri day\r\n   */\n  UmAlQuraStatic.hijriToGregorian = function (hy, hm, hd) {\n    this._checkYearRange(hy);\n    this._checkMonthRange(hm);\n    this._checkDayRange(hd);\n    var nDays = hd - 1;\n    var index = hy - this.minCalendarYear;\n    var dt = this.hijriYearData[index].gregorianDate;\n    var b = this.hijriYearData[index].hijriMonthsLengthFlags;\n    for (var m = 1; m < hm; m++) {\n      nDays = nDays + 29 + (b & 1);\n      b >>= 1;\n    }\n    dt = this.addDays(dt, nDays);\n    return {\n      gy: dt.getFullYear(),\n      gm: dt.getMonth(),\n      gd: dt.getDate()\n    };\n  };\n  /**\r\n   * Coverts the given Gregorian date to Hijri year, month and day.\r\n   * @param date The date to be converted\r\n   */\n  UmAlQuraStatic.gregorianToHijri = function (date) {\n    this._checkMillsRange(date.getTime());\n    // Find the index where we should start our search by quessing the Hijri year that we will be in HijriYearInfo.\n    // A Hijri year is 354 or 355 days.  Use 355 days so that we will search from a lower index.\n    var index = Math.trunc((date.getTime() - this.minDate.getTime()) / this.millisPerDay / 355);\n    do {} while (date.getTime() > this.hijriYearData[++index].gregorianDate.getTime());\n    if (date.getTime() !== this.hijriYearData[index].gregorianDate.getTime()) {\n      index--;\n    }\n    var nDays = this._dayDiff(date, this.hijriYearData[index].gregorianDate);\n    var yh1 = index + this.minCalendarYear;\n    var mh1 = 1;\n    var dh1 = 1;\n    var b = this.hijriYearData[index].hijriMonthsLengthFlags;\n    var daysPerThisMonth = 29 + (b & 1);\n    while (nDays >= daysPerThisMonth) {\n      nDays -= daysPerThisMonth;\n      b >>= 1;\n      daysPerThisMonth = 29 + (b & 1);\n      mh1++;\n    }\n    dh1 += Math.trunc(nDays);\n    return {\n      hy: yh1,\n      hm: mh1,\n      hd: dh1\n    };\n  };\n  /**\r\n   * Adds the specified amount of Hijri years to the given Gregorian date.\r\n   * @param date The date\r\n   * @param hys The Hijri years to be added\r\n   */\n  UmAlQuraStatic.addYears = function (date, hys) {\n    return this.addMonths(date, hys * 12);\n  };\n  /**\r\n   * Adds the specified amount of Hijri months to the given Gregorian date.\r\n   * @param date The date\r\n   * @param hms The Hijri months to be added\r\n   */\n  UmAlQuraStatic.addMonths = function (date, hms) {\n    // Get the date in UmAlQura calendar.\n    var y = this._getDatePart(date, DatePart$1.Year);\n    var m = this._getDatePart(date, DatePart$1.Month);\n    var d = this._getDatePart(date, DatePart$1.Day);\n    var i = m - 1 + hms;\n    if (i >= 0) {\n      m = i % 12 + 1;\n      y += Math.trunc(i / 12);\n    } else {\n      m = 12 + (i + 1) % 12;\n      y += Math.trunc((i - 11) / 12);\n    }\n    if (d > 29) {\n      var days = this.getDaysInMonth(y, m);\n      if (d > days) {\n        d = days;\n      }\n    }\n    var _a = this.hijriToGregorian(y, m, d),\n      gy = _a.gy,\n      gm = _a.gm,\n      gd = _a.gd;\n    return this._setTime(new Date(gy, gm, gd), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n  };\n  /**\r\n   * Adds the specified amount of weeks to the given Gregorian date.\r\n   * @param date The date\r\n   * @param wks The weeks to be added\r\n   */\n  UmAlQuraStatic.addWeeks = function (date, wks) {\n    return this.addDays(date, wks * 7);\n  };\n  /**\r\n   * Adds the specified amount of days to the given Gregorian date.\r\n   * @param date The date\r\n   * @param days The days to be added\r\n   */\n  UmAlQuraStatic.addDays = function (date, days) {\n    var d = new Date(date.valueOf());\n    d.setDate(d.getDate() + days);\n    return d;\n  };\n  /**\r\n   * Adds the specified amount of units to the given Gregorian date.\r\n   * @param date The date\r\n   * @param value The amount of `unit`s to add\r\n   * @param unit The unit of time\r\n   */\n  UmAlQuraStatic.addTime = function (date, value, unit) {\n    var d = new Date(date.valueOf());\n    switch (unit) {\n      case 'hour':\n        d.setHours(d.getHours() + value);\n        break;\n      case 'minute':\n        d.setMinutes(d.getMinutes() + value);\n        break;\n      case 'second':\n        d.setSeconds(d.getSeconds() + value);\n        break;\n      case 'millisecond':\n        d.setMilliseconds(d.getMilliseconds() + value);\n        break;\n      default:\n        throw new Error('Invalid value for `unit` param');\n    }\n    return d;\n  };\n  /**\r\n   * Returns the Hijri day of year for the specified Gregorian date.\r\n   * @param date The date\r\n   */\n  UmAlQuraStatic.getDayOfYear = function (date) {\n    return this._getDatePart(date, DatePart$1.DayOfYear);\n  };\n  /**\r\n   * Returns the Hijri day of month for the specified Gregorian date.\r\n   * @param date The date\r\n   */\n  UmAlQuraStatic.getDayOfMonth = function (date) {\n    return this._getDatePart(date, DatePart$1.Day);\n  };\n  /**\r\n   * Returns the day of week for the specified Gregorian date.\r\n   * @param date The date\r\n   */\n  UmAlQuraStatic.getDayOfWeek = function (date) {\n    return date.getDay();\n  };\n  /**\r\n   * Returns the Hijri week of year for the specified Gregorian date.\r\n   * @param date The date\r\n   */\n  UmAlQuraStatic.getWeekOfYear = function (date) {\n    var firstDayOfYear = this.startOf(date, 'year').getDay();\n    var daysToDayOfWeek = firstDayOfYear - date.getDay();\n    var d = this.addDays(date, daysToDayOfWeek);\n    return Math.ceil(this.getDayOfYear(d) / 7);\n  };\n  /**\r\n   * Returns the number of days in the specified Hijri year.\r\n   * @param hy The Hijri year\r\n   */\n  UmAlQuraStatic.getDaysInYear = function (hy) {\n    this._checkYearRange(hy);\n    var days = 0;\n    var b = this.hijriYearData[hy - this.minCalendarYear].hijriMonthsLengthFlags;\n    for (var m = 1; m <= 12; m++) {\n      days = days + 29 + (b & 1);\n      b >>= 1;\n    }\n    if (days !== 354 && days !== 355) {\n      throw new Error('Days in year assert error. This is possibly a bug.');\n    }\n    return days;\n  };\n  /**\r\n   * Returns the number of days in the specified Hijri year and month.\r\n   * @param hy The Hijri year\r\n   * @param hm The Hijri month\r\n   */\n  UmAlQuraStatic.getDaysInMonth = function (hy, hm) {\n    this._checkYearRange(hy);\n    this._checkMonthRange(hm);\n    if ((this.hijriYearData[hy - this.minCalendarYear].hijriMonthsLengthFlags & 1 << hm - 1) === 0) {\n      return 29;\n    } else {\n      return 30;\n    }\n  };\n  /**\r\n   * Returns the Hijri year corresponding to the given Gregorian date.\r\n   * @param date The date\r\n   */\n  UmAlQuraStatic.getYear = function (date) {\n    return this._getDatePart(date, DatePart$1.Year);\n  };\n  /**\r\n   * Returns the Hijri month corresponding to the given Gregorian date.\r\n   * @param date The date\r\n   */\n  UmAlQuraStatic.getMonth = function (date) {\n    return this._getDatePart(date, DatePart$1.Month);\n  };\n  /**\r\n   * Returns the Hijri month array for the given Gregorian date.\r\n   * @param date The date\r\n   */\n  UmAlQuraStatic.getMonthArray = function (date) {\n    var weeks = [];\n    var month = this.getMonth(date);\n    var start = this.startOf(this.startOf(date, 'month'), 'week');\n    var end = this.endOf(this.endOf(date, 'month'), 'week');\n    var i = 0;\n    while (start < end) {\n      var w = Math.floor(i / 7);\n      var day = new Date(start.valueOf());\n      weeks[w] = weeks[w] || [];\n      weeks[w].push(this.getMonth(day) === month ? day : null);\n      start.setDate(start.getDate() + 1);\n      i++;\n    }\n    return weeks;\n  };\n  /**\r\n   * Returns the Gregorian date corresponding to the Hijri date starting at the specified unit of time.\r\n   * @param date: The date\r\n   * @param unit: The unit of time\r\n   */\n  UmAlQuraStatic.startOf = function (date, unit) {\n    var d = new Date(date);\n    var _a = this.gregorianToHijri(d),\n      hy = _a.hy,\n      hm = _a.hm;\n    switch (unit) {\n      case 'year':\n        return this.toDate(hy, 1, 1, 0, 0, 0, 0);\n      case 'month':\n        return this.toDate(hy, hm, 1, 0, 0, 0, 0);\n      case 'week':\n        var dow = this.getDayOfWeek(d);\n        d = this.addDays(d, -dow);\n      case 'day':\n        d.setHours(0);\n      case 'hour':\n        d.setMinutes(0);\n      case 'minute':\n        d.setSeconds(0);\n      case 'second':\n        d.setMilliseconds(0);\n        break;\n      default:\n        throw new Error('Invalid value for `unit` param');\n    }\n    return d;\n  };\n  /**\r\n   * Returns the Gregorian date corresponding to the Hijri date ending at the specified unit of time.\r\n   * @param date: The date\r\n   * @param unit: The unit of time\r\n   */\n  UmAlQuraStatic.endOf = function (date, unit) {\n    var d = new Date(date);\n    var _a = this.gregorianToHijri(d),\n      hy = _a.hy,\n      hm = _a.hm;\n    var daysInMonth;\n    switch (unit) {\n      case 'year':\n        daysInMonth = this.getDaysInMonth(hy, 12);\n        return this.toDate(hy, 12, daysInMonth, 23, 59, 59, 999);\n      case 'month':\n        daysInMonth = this.getDaysInMonth(hy, hm);\n        return this.toDate(hy, hm, daysInMonth, 23, 59, 59, 999);\n      case 'week':\n        var dow = this.getDayOfWeek(d);\n        d = this.addDays(d, 6 - dow);\n      case 'day':\n        d.setHours(23);\n      case 'hour':\n        d.setMinutes(59);\n      case 'minute':\n        d.setSeconds(59);\n      case 'second':\n        d.setMilliseconds(999);\n        break;\n      default:\n        throw new Error('Invalid value for `unit` param');\n    }\n    return d;\n  };\n  /**\r\n   * Returns whether or not the given Hijri year is a leap year.\r\n   * A Hijri leap year is where the number of days in that year is 355.\r\n   * @param hy The Hijri year\r\n   */\n  UmAlQuraStatic.isLeapYear = function (hy) {\n    return this.getDaysInYear(hy) === 355;\n  };\n  /**\r\n   * Converts the specified Hijri date time to a Gregorian Date instance.\r\n   * @param hy The Hijri year\r\n   * @param hm The Hijri month\r\n   * @param hd The Hijri day\r\n   * @param hour The Hour component\r\n   * @param minute The Minute component\r\n   * @param second The Second component\r\n   * @param millisecond The Millisecond component\r\n   */\n  UmAlQuraStatic.toDate = function (hy, hm, hd, hour, minute, second, millisecond) {\n    if (hour === void 0) {\n      hour = 0;\n    }\n    if (minute === void 0) {\n      minute = 0;\n    }\n    if (second === void 0) {\n      second = 0;\n    }\n    if (millisecond === void 0) {\n      millisecond = 0;\n    }\n    var daysInMonth = this.getDaysInMonth(hy, hm);\n    if (hd < 1 || hd > daysInMonth) {\n      throw new Error(\"Invalid value for day for the given year/month. Day must be between 1 and \" + daysInMonth + \".\");\n    }\n    if (hour < 0 || hour >= 24 || minute < 0 || minute >= 60 || second < 0 || second >= 60 || millisecond < 0 || millisecond >= this.millisPerSecond) {\n      throw new Error('Invalid value for hour, minute, second or millisecond.');\n    }\n    var _a = this.hijriToGregorian(hy, hm, hd),\n      gy = _a.gy,\n      gm = _a.gm,\n      gd = _a.gd;\n    return this._setTime(new Date(gy, gm, gd), hour, minute, second, millisecond);\n  };\n  /**\r\n   * Formats the specified Gregorian Date instance in Hijri date.\r\n   * @param date The date\r\n   * @param mask The format mask\r\n   * @param locale The locale to use. If omitted, uses the globally set locale or the default locale.\r\n   */\n  UmAlQuraStatic.format = function (date, mask, locale) {\n    var _a = this.gregorianToHijri(date),\n      hy = _a.hy,\n      hm = _a.hm,\n      hd = _a.hd;\n    return format(date, mask, locale ? this._loadLocale(locale) : this.locale, hy, hm, hd, this.getWeekOfYear(date), this.getDayOfWeek(date));\n  };\n  /**\r\n   * Sets global locale to be used for formatting.\r\n   * @param locale The locale\r\n   */\n  UmAlQuraStatic.setLocale = function (locale) {\n    this.locale = this._loadLocale(locale);\n  };\n  /**\r\n   * Registers the specified locale.\r\n   * @param locale The locale\r\n   */\n  UmAlQuraStatic.registerLocale = function (locale) {\n    if (!locale.name) {\n      throw new Error(\"The locale's 'name' property must not be empty.\");\n    }\n    if (this.locales[locale.name]) {\n      throw new Error(\"A locale with the same name '\" + locale.name + \"' is already registered.\");\n    }\n    this.locales[locale.name] = locale;\n  };\n  UmAlQuraStatic._loadLocale = function (locale) {\n    if (this.locales[locale]) {\n      return this.locales[locale];\n    }\n    console.warn(\"The requested locale '\" + locale + \"' could not be found. Using the default locale instead.\");\n    return en;\n  };\n  UmAlQuraStatic._getDatePart = function (date, part) {\n    var _a = this.gregorianToHijri(date),\n      hy = _a.hy,\n      hm = _a.hm,\n      hd = _a.hd;\n    switch (part) {\n      case DatePart$1.Year:\n        return hy;\n      case DatePart$1.Month:\n        return hm;\n      case DatePart$1.Day:\n        return hd;\n      case DatePart$1.DayOfYear:\n        return Math.trunc(this._getAbsoluteDateUmAlQura(hy, hm, hd) - this._getAbsoluteDateUmAlQura(hy, 1, 1) + 1);\n    }\n  };\n  UmAlQuraStatic._setTime = function (date, hour, minute, second, millisecond) {\n    date.setHours(hour);\n    date.setMinutes(minute);\n    date.setSeconds(second);\n    date.setMilliseconds(millisecond);\n    return date;\n  };\n  UmAlQuraStatic._getAbsoluteDateUmAlQura = function (hy, hm, hd) {\n    var _a = this.hijriToGregorian(hy, hm, hd),\n      gy = _a.gy,\n      gm = _a.gm,\n      gd = _a.gd;\n    return new Date(gy, gm, gd).getTime() / this.millisPerDay;\n  };\n  UmAlQuraStatic._checkYearRange = function (hy) {\n    if (hy < this.minCalendarYear || hy > this.maxCalendarYear) {\n      throw new Error(\"Invalid value for year. Must be between \" + this.minCalendarYear + \" and \" + this.maxCalendarYear + \".\");\n    }\n  };\n  UmAlQuraStatic._checkMonthRange = function (hm) {\n    if (hm < 1 || hm > 12) {\n      throw new Error(\"Invalid value for month. Must be between 1 and 12.\");\n    }\n  };\n  UmAlQuraStatic._checkDayRange = function (day) {\n    if (day < 1 || day > 30) {\n      throw new Error(\"Invalid value for day. Must be between 1 and 30.\");\n    }\n  };\n  UmAlQuraStatic._checkMillsRange = function (millis) {\n    if (millis < this.minDate.getTime() || millis > this.maxDate.getTime()) {\n      throw new Error(\"Invalid value for epoch. Must be between \" + this.minDate.getTime() + \" and \" + this.maxDate.getTime() + \".\");\n    }\n  };\n  UmAlQuraStatic._dayDiff = function (date, other) {\n    return (date.getTime() - other.getTime()) / (1000 * 60 * 60 * 24);\n  };\n  UmAlQuraStatic._initDateMapping = function () {\n    var rawData = [\n    // This data is auto generated from the .net BCL which seemed the most accurate\n    // Other source which have been found having abnormalities include:\n    // http://www.staff.science.uu.nl/~gent0113/islam/addfiles/islamcalendar_dat.js - Has 28 days in one of the month which is impossible\n    // http://www.ummulqura.org.sa/ - Has several inaccurate dates\n    // Generated by /personal-proj/umalqura/data-gen\n    /*  DaysPerM  GY   GM  GD      D1   D2   D3   D4   D5   D6   D7   D8   D9   D10  D11  D12\r\n    1318*/\n    0x02EA, 1900, 4, 30, 0x06E9, 1901, 4, 19, 0x0ED2, 1902, 4, 9, 0x0EA4, 1903, 3, 30, 0x0D4A, 1904, 3, 18, 0x0A96, 1905, 3, 7, 0x0536, 1906, 2, 24, 0x0AB5, 1907, 2, 13, 0x0DAA, 1908, 2, 3, 0x0BA4, 1909, 1, 23, 0x0B49, 1910, 1, 12, 0x0A93, 1911, 1, 1, 0x052B, 1911, 12, 21, 0x0A57, 1912, 12, 9, 0x04B6, 1913, 11, 29, 0x0AB5, 1914, 11, 18, 0x05AA, 1915, 11, 8, 0x0D55, 1916, 10, 27, 0x0D2A, 1917, 10, 17, 0x0A56, 1918, 10, 6, 0x04AE, 1919, 9, 25, 0x095D, 1920, 9, 13, 0x02EC, 1921, 9, 3, 0x06D5, 1922, 8, 23, 0x06AA, 1923, 8, 13, 0x0555, 1924, 8, 1, 0x04AB, 1925, 7, 21, 0x095B, 1926, 7, 10, 0x02BA, 1927, 6, 30, 0x0575, 1928, 6, 18, 0x0BB2, 1929, 6, 8, 0x0764, 1930, 5, 29, 0x0749, 1931, 5, 18, 0x0655, 1932, 5, 6, 0x02AB, 1933, 4, 25, 0x055B, 1934, 4, 14, 0x0ADA, 1935, 4, 4, 0x06D4, 1936, 3, 24, 0x0EC9, 1937, 3, 13, 0x0D92, 1938, 3, 3, 0x0D25, 1939, 2, 20, 0x0A4D, 1940, 2, 9, 0x02AD, 1941, 1, 28, 0x056D, 1942, 1, 17, 0x0B6A, 1943, 1, 7, 0x0B52, 1943, 12, 28, 0x0AA5, 1944, 12, 16, 0x0A4B, 1945, 12, 5, 0x0497, 1946, 11, 24, 0x0937, 1947, 11, 13, 0x02B6, 1948, 11, 2, 0x0575, 1949, 10, 22, 0x0D6A, 1950, 10, 12, 0x0D52, 1951, 10, 2, 0x0A96, 1952, 9, 20, 0x092D, 1953, 9, 9, 0x025D, 1954, 8, 29, 0x04DD, 1955, 8, 18, 0x0ADA, 1956, 8, 7, 0x05D4, 1957, 7, 28, 0x0DA9, 1958, 7, 17, 0x0D52, 1959, 7, 7, 0x0AAA, 1960, 6, 25, 0x04D6, 1961, 6, 14, 0x09B6, 1962, 6, 3, 0x0374, 1963, 5, 24, 0x0769, 1964, 5, 12, 0x0752, 1965, 5, 2, 0x06A5, 1966, 4, 21, 0x054B, 1967, 4, 10, 0x0AAB, 1968, 3, 29, 0x055A, 1969, 3, 19, 0x0AD5, 1970, 3, 8, 0x0DD2, 1971, 2, 26, 0x0DA4, 1972, 2, 16, 0x0D49, 1973, 2, 4, 0x0A95, 1974, 1, 24, 0x052D, 1975, 1, 13, 0x0A5D, 1976, 1, 2, 0x055A, 1976, 12, 22, 0x0AD5, 1977, 12, 11, 0x06AA, 1978, 12, 1, 0x0695, 1979, 11, 20, 0x052B, 1980, 11, 8, 0x0A57, 1981, 10, 28, 0x04AE, 1982, 10, 18, 0x0976, 1983, 10, 7, 0x056C, 1984, 9, 26, 0x0B55, 1985, 9, 15, 0x0AAA, 1986, 9, 5, 0x0A55, 1987, 8, 25, 0x04AD, 1988, 8, 13, 0x095D, 1989, 8, 2, 0x02DA, 1990, 7, 23, 0x05D9, 1991, 7, 12, 0x0DB2, 1992, 7, 1, 0x0BA4, 1993, 6, 21, 0x0B4A, 1994, 6, 10, 0x0A55, 1995, 5, 30, 0x02B5, 1996, 5, 18, 0x0575, 1997, 5, 7, 0x0B6A, 1998, 4, 27, 0x0BD2, 1999, 4, 17, 0x0BC4, 2000, 4, 6, 0x0B89, 2001, 3, 26, 0x0A95, 2002, 3, 15, 0x052D, 2003, 3, 4, 0x05AD, 2004, 2, 21, 0x0B6A, 2005, 2, 10, 0x06D4, 2006, 1, 31, 0x0DC9, 2007, 1, 20, 0x0D92, 2008, 1, 10, 0x0AA6, 2008, 12, 29, 0x0956, 2009, 12, 18, 0x02AE, 2010, 12, 7, 0x056D, 2011, 11, 26, 0x036A, 2012, 11, 15, 0x0B55, 2013, 11, 4, 0x0AAA, 2014, 10, 25, 0x094D, 2015, 10, 14, 0x049D, 2016, 10, 2, 0x095D, 2017, 9, 21, 0x02BA, 2018, 9, 11, 0x05B5, 2019, 8, 31, 0x05AA, 2020, 8, 20, 0x0D55, 2021, 8, 9, 0x0A9A, 2022, 7, 30, 0x092E, 2023, 7, 19, 0x026E, 2024, 7, 7, 0x055D, 2025, 6, 26, 0x0ADA, 2026, 6, 16, 0x06D4, 2027, 6, 6, 0x06A5, 2028, 5, 25, 0x054B, 2029, 5, 14, 0x0A97, 2030, 5, 3, 0x054E, 2031, 4, 23, 0x0AAE, 2032, 4, 11, 0x05AC, 2033, 4, 1, 0x0BA9, 2034, 3, 21, 0x0D92, 2035, 3, 11, 0x0B25, 2036, 2, 28, 0x064B, 2037, 2, 16, 0x0CAB, 2038, 2, 5, 0x055A, 2039, 1, 26, 0x0B55, 2040, 1, 15, 0x06D2, 2041, 1, 4, 0x0EA5, 2041, 12, 24, 0x0E4A, 2042, 12, 14, 0x0A95, 2043, 12, 3, 0x052D, 2044, 11, 21, 0x0AAD, 2045, 11, 10, 0x036C, 2046, 10, 31, 0x0759, 2047, 10, 20, 0x06D2, 2048, 10, 9, 0x0695, 2049, 9, 28, 0x052D, 2050, 9, 17, 0x0A5B, 2051, 9, 6, 0x04BA, 2052, 8, 26, 0x09BA, 2053, 8, 15, 0x03B4, 2054, 8, 5, 0x0B69, 2055, 7, 25, 0x0B52, 2056, 7, 14, 0x0AA6, 2057, 7, 3, 0x04B6, 2058, 6, 22, 0x096D, 2059, 6, 11, 0x02EC, 2060, 5, 31, 0x06D9, 2061, 5, 20, 0x0EB2, 2062, 5, 10, 0x0D54, 2063, 4, 30, 0x0D2A, 2064, 4, 18, 0x0A56, 2065, 4, 7, 0x04AE, 2066, 3, 27, 0x096D, 2067, 3, 16, 0x0D6A, 2068, 3, 5, 0x0B54, 2069, 2, 23, 0x0B29, 2070, 2, 12, 0x0A93, 2071, 2, 1, 0x052B, 2072, 1, 21, 0x0A57, 2073, 1, 9, 0x0536, 2073, 12, 30, 0x0AB5, 2074, 12, 19, 0x06AA, 2075, 12, 9, 0x0E93, 2076, 11, 27, 0, 2077, 11, 17 /* 0    0    0    0    0    0    0    0    0    0    0    0    2077-11-17*/];\n    var mapping = [];\n    for (var i = 0; i < rawData.length / 4; i++) {\n      mapping.push(new DateMapping(rawData[i * 4], rawData[i * 4 + 1], rawData[i * 4 + 2] - 1, rawData[i * 4 + 3]));\n    }\n    return mapping;\n  };\n  // private static readonly maxSeconds = 9223372036854775807 / 10000000;\n  // private static readonly minSeconds = -9223372036854775807 / 10000000;\n  UmAlQuraStatic.millisPerSecond = 1000;\n  UmAlQuraStatic.millisPerMinute = UmAlQuraStatic.millisPerSecond * 60;\n  UmAlQuraStatic.millisPerHour = UmAlQuraStatic.millisPerMinute * 60;\n  UmAlQuraStatic.millisPerDay = UmAlQuraStatic.millisPerHour * 24;\n  UmAlQuraStatic.minDate = new Date(1900, 3, 30);\n  UmAlQuraStatic.maxDate = new Date(2077, 10, 16, 23, 59, 59, 999);\n  UmAlQuraStatic.hijriYearData = UmAlQuraStatic._initDateMapping();\n  // Holds globally set locale\n  UmAlQuraStatic.locale = en;\n  // Holds registered locales\n  UmAlQuraStatic.locales = {};\n  UmAlQuraStatic.minCalendarYear = 1318;\n  UmAlQuraStatic.maxCalendarYear = 1500;\n  return UmAlQuraStatic;\n}();\n// Register both locales so they'll be bundled in the package.\n// This is fine since for this library, there will probably be\n// only be these two locales.\nUmAlQuraStatic.registerLocale(ar);\nUmAlQuraStatic.registerLocale(en);\nvar UmAlQura = /** @class */function () {\n  function UmAlQura(dateOrHy, hm, hd, hour, minute, second, millisecond) {\n    if (hour === void 0) {\n      hour = 0;\n    }\n    if (minute === void 0) {\n      minute = 0;\n    }\n    if (second === void 0) {\n      second = 0;\n    }\n    if (millisecond === void 0) {\n      millisecond = 0;\n    }\n    this._date = new Date(0, 0, 0);\n    this._hy = 0;\n    this._hm = 0;\n    this._hd = 0;\n    if (dateOrHy instanceof Date) {\n      this._setDate(dateOrHy);\n    } else if (dateOrHy !== undefined && hm !== undefined && hd !== undefined) {\n      var _a = UmAlQuraStatic.hijriToGregorian(dateOrHy, hm, hd),\n        gy = _a.gy,\n        gm = _a.gm,\n        gd = _a.gd;\n      this._setDate(new Date(gy, gm, gd, hour, minute, second, millisecond));\n    } else {\n      this._setDate(new Date());\n    }\n  }\n  Object.defineProperty(UmAlQura.prototype, \"date\", {\n    /**\r\n     * Returns the `Date` object of this instance.\r\n     */\n    get: function () {\n      return new Date(this._date.valueOf());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"hy\", {\n    /**\r\n     * Returns the Hijri year of this instance.\r\n     */\n    get: function () {\n      return this._hy;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"hm\", {\n    /**\r\n     * Returns the Hijri month of this instance.\r\n     */\n    get: function () {\n      return this._hm;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"hd\", {\n    /**\r\n     * Returns the Hijri day of month of this instance.\r\n     */\n    get: function () {\n      return this._hd;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"dayOfYear\", {\n    /**\r\n     * Returns the Hijri day of year of this instance.\r\n     */\n    get: function () {\n      return UmAlQuraStatic.getDayOfYear(this.date);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"dayOfWeek\", {\n    /**\r\n     * Returns the day of week of this instance.\r\n     */\n    get: function () {\n      return UmAlQuraStatic.getDayOfWeek(this.date);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"weekOfYear\", {\n    /**\r\n     * Returns the Hijri week of year of this instance.\r\n     */\n    get: function () {\n      return UmAlQuraStatic.getWeekOfYear(this.date);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"daysInYear\", {\n    /**\r\n     * Returns the number of days in year of this instance.\r\n     */\n    get: function () {\n      return UmAlQuraStatic.getDaysInYear(this.hy);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"daysInMonth\", {\n    /**\r\n     * Returns the number of days in month of this instance.\r\n     */\n    get: function () {\n      return UmAlQuraStatic.getDaysInMonth(this.hy, this.hm);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"isLeapYear\", {\n    /**\r\n     * Returns whether or not the Hijri year of this instance is a leap year.\r\n     */\n    get: function () {\n      return UmAlQuraStatic.isLeapYear(this.hy);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(UmAlQura.prototype, \"monthArray\", {\n    /**\r\n     * Returns the Hijri month array of this instance.\r\n     */\n    get: function () {\n      return UmAlQuraStatic.getMonthArray(this.date).map(function (w) {\n        return w.map(function (d) {\n          return d ? new UmAlQura(d) : null;\n        });\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds the specified amount of `unit` to the current date and returns a new instance.\r\n   * @param {number} value The amount of units to be added\r\n   * @param {UnitOfTimeMs} unit The unit of time\r\n   */\n  UmAlQura.prototype.add = function (value, unit) {\n    switch (unit) {\n      case 'year':\n        return new UmAlQura(UmAlQuraStatic.addYears(this.date, value));\n      case 'month':\n        return new UmAlQura(UmAlQuraStatic.addMonths(this.date, value));\n      case 'week':\n        return new UmAlQura(UmAlQuraStatic.addWeeks(this.date, value));\n      case 'day':\n        return new UmAlQura(UmAlQuraStatic.addDays(this.date, value));\n      case 'hour':\n      case 'minute':\n      case 'second':\n      case 'millisecond':\n        return new UmAlQura(UmAlQuraStatic.addTime(this.date, value, unit));\n      default:\n        throw new Error('Invalid value for `unit`');\n    }\n  };\n  /**\r\n   * Subtracts the specified amount of `unit` from the current date and returns a new instance.\r\n   * @param {number} value The amount of units to be subtracted\r\n   * @param {UnitOfTimeMs} unit The unit of time\r\n   */\n  UmAlQura.prototype.subtract = function (value, unit) {\n    return this.add(value * -1, unit);\n  };\n  /**\r\n   * Returns a new instance having the Hijri date of this instance starting at the specified unit of time.\r\n   * @param {UnitOfTime} unit The unit of time\r\n   */\n  UmAlQura.prototype.startOf = function (unit) {\n    return new UmAlQura(UmAlQuraStatic.startOf(this.date, unit));\n  };\n  /**\r\n   * Returns a new instance having the Hijri date of this instance ending at the specified unit of time.\r\n   * @param {UnitOfTime} unit The unit of time\r\n   */\n  UmAlQura.prototype.endOf = function (unit) {\n    return new UmAlQura(UmAlQuraStatic.endOf(this.date, unit));\n  };\n  /**\r\n   * Checks if current date is before the specified date. The comparison is made based on milliseconds of both\r\n   * times. This can be changed by specifying a value for the `unit` parameter.\r\n   * @param {(UmAlQura | Date)} other The date to compare against\r\n   * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n   */\n  UmAlQura.prototype.isBefore = function (other, unit) {\n    if (unit === void 0) {\n      unit = 'millisecond';\n    }\n    var thisDate = this.date;\n    var thatDate = other instanceof Date ? other : other.date;\n    if (unit === 'millisecond') {\n      return thisDate.valueOf() < thatDate.valueOf();\n    } else {\n      return this.endOf(unit).date.valueOf() < thatDate.valueOf();\n    }\n  };\n  /**\r\n   * Checks if current date is after the specified date. The comparison is made based on milliseconds,\r\n   * this can be changed by specifying a value for the `unit` parameter.\r\n   * @param {(UmAlQura | Date)} other The date to compare against\r\n   * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n   */\n  UmAlQura.prototype.isAfter = function (other, unit) {\n    if (unit === void 0) {\n      unit = 'millisecond';\n    }\n    var thisDate = this.date;\n    var thatDate = other instanceof Date ? other : other.date;\n    if (unit === 'millisecond') {\n      return thisDate.valueOf() > thatDate.valueOf();\n    } else {\n      return this.startOf(unit).date.valueOf() > thatDate.valueOf();\n    }\n  };\n  /**\r\n   * Checks if current date is same as the specified date. The comparison is made based on milliseconds,\r\n   * this can be changed by specifying a value for the `unit` parameter.\r\n   * @param {(UmAlQura | Date)} other The date to compare against\r\n   * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n   */\n  UmAlQura.prototype.isSame = function (other, unit) {\n    if (unit === void 0) {\n      unit = 'millisecond';\n    }\n    var thisDate = this.date;\n    var thatDate = other instanceof Date ? other : other.date;\n    if (unit === 'millisecond') {\n      return thisDate.valueOf() === thatDate.valueOf();\n    } else {\n      return this.startOf(unit).date.valueOf() === new UmAlQura(thatDate).startOf(unit).date.valueOf();\n    }\n  };\n  /**\r\n   * Checks if current date is same as or before the specified date. The comparison is made based on milliseconds,\r\n   * this can be changed by specifying a value for the `unit` parameter.\r\n   * @param {(UmAlQura | Date)} other The date to compare against\r\n   * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n   */\n  UmAlQura.prototype.isSameOrBefore = function (other, unit) {\n    if (unit === void 0) {\n      unit = 'millisecond';\n    }\n    return this.isSame(other, unit) || this.isBefore(other, unit);\n  };\n  /**\r\n   * Checks if current date is same as or after the specified date. The comparison is made based on milliseconds,\r\n   * this can be changed by specifying a value for the `unit` parameter.\r\n   * @param {(UmAlQura | Date)} other The date to compare against\r\n   * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n   */\n  UmAlQura.prototype.isSameOrAfter = function (other, unit) {\n    if (unit === void 0) {\n      unit = 'millisecond';\n    }\n    return this.isSame(other, unit) || this.isAfter(other, unit);\n  };\n  /**\r\n   * Checks if current date is between the specified `from`/`to` dates. The comparison is made based on milliseconds,\r\n   * this can be changed by specifying a value for the `unit` parameter. The comparison is exclusive of both ends by default,\r\n   * this can be controller by `fromInclusive`/`toInclusive` parameters.\r\n   * @param {(UmAlQura | Date)} from The lower bound date\r\n   * @param {(UmAlQura | Date)} to The higher bound date\r\n   * @param {boolean} [fromInclusive=false] Whether lower bound is inclusive, defaults to false.\r\n   * @param {boolean} [toInclusive=false] Whether upper bound is inclusive, defaults to false.\r\n   * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n   */\n  UmAlQura.prototype.isBetween = function (from, to, fromInclusive, toInclusive, unit) {\n    if (fromInclusive === void 0) {\n      fromInclusive = false;\n    }\n    if (toInclusive === void 0) {\n      toInclusive = false;\n    }\n    if (unit === void 0) {\n      unit = 'millisecond';\n    }\n    return (fromInclusive ? this.isSameOrAfter(from, unit) : this.isAfter(from, unit)) && (toInclusive ? this.isSameOrBefore(to, unit) : this.isBefore(to, unit));\n  };\n  /**\r\n   * Formats this instance in Hijri date.\r\n   * @param {string} mask The mask\r\n   * @param {string} locale The locale to use. If omitted, uses  the locale set via `locale` or the default locale.\r\n   */\n  UmAlQura.prototype.format = function (mask, locale) {\n    // tslint:disable-next-line:no-string-literal\n    return UmAlQuraStatic.format(this.date, mask, locale || UmAlQuraStatic['locale'].name);\n  };\n  /**\r\n   * Clones this instance and returns a new instance with the same values.\r\n   */\n  UmAlQura.prototype.clone = function () {\n    return new UmAlQura(this.date);\n  };\n  UmAlQura.prototype._setDate = function (date) {\n    var _a = UmAlQuraStatic.gregorianToHijri(date),\n      hy = _a.hy,\n      hm = _a.hm,\n      hd = _a.hd;\n    this._date = new Date(date.valueOf());\n    this._hy = hy;\n    this._hm = hm;\n    this._hd = hd;\n  };\n  return UmAlQura;\n}();\nfunction umalqura(dateOrHy, hm, hd, hour, minute, second, millisecond) {\n  if (hour === void 0) {\n    hour = 0;\n  }\n  if (minute === void 0) {\n    minute = 0;\n  }\n  if (second === void 0) {\n    second = 0;\n  }\n  if (millisecond === void 0) {\n    millisecond = 0;\n  }\n  if (dateOrHy instanceof Date) {\n    return new UmAlQura(dateOrHy);\n  } else if (dateOrHy !== undefined && hm !== undefined && hd !== undefined) {\n    return new UmAlQura(dateOrHy, hm, hd, hour, minute, second, millisecond);\n  } else {\n    return new UmAlQura();\n  }\n}\n/**\r\n * Returns the library version.\r\n */\numalqura.VERSION = \"0.0.7\";\n/**\r\n * Returns a class which exposes static Hijri related functions.\r\n */\numalqura.$ = UmAlQuraStatic;\n/**\r\n * Returns the minimum supported Hijri date.\r\n */\numalqura.min = umalqura(UmAlQuraStatic['minCalendarYear'], 1, 1);\n/**\r\n * Returns the maximum supported Hijri date.\r\n */\numalqura.max = umalqura(UmAlQuraStatic['maxCalendarYear'], 1, 1).endOf('year');\n/**\r\n * Gets or sets the global locale\r\n  * @param locale The locale to set. If omitted, returns the current locale\r\n */\numalqura.locale = function (locale) {\n  return locale ? UmAlQuraStatic.setLocale(locale) : UmAlQuraStatic['locale'].name;\n};\n/**\r\n * Returns whether the currently set locale is RTL or not.\r\n */\numalqura.rtl = function () {\n  return !!UmAlQuraStatic['locale'].rtl;\n};\n/**\r\n * Returns the times names using the currently set locale.\r\n */\numalqura.times = function () {\n  return UmAlQuraStatic['locale'].timeNames.slice();\n};\n/**\r\n * Returns the days names using the currently set locale.\r\n */\numalqura.days = function () {\n  return UmAlQuraStatic['locale'].dayNames.slice();\n};\n/**\r\n * Returns the days short names using the currently set locale.\r\n */\numalqura.daysShort = function () {\n  return UmAlQuraStatic['locale'].dayNamesShort.slice();\n};\n/**\r\n * Returns the months names using the currently set locale.\r\n */\numalqura.months = function () {\n  return UmAlQuraStatic['locale'].monthNames.slice();\n};\n/**\r\n * Returns the months short names using the currently set locale.\r\n */\numalqura.monthsShort = function () {\n  return UmAlQuraStatic['locale'].monthNamesShort.slice();\n};\n/**\r\n * Returns the localized number for the given number using the currently set locale.\r\n */\numalqura.localizeNum = function (num) {\n  return UmAlQuraStatic['locale'].localizeNum(num);\n};\n/**\r\n * Returns the localized day number for the given day number using the currently set locale.\r\n */\numalqura.localizeDayNum = function (d) {\n  return UmAlQuraStatic['locale'].localizeDayNum(d);\n};\nexport default umalqura;","map":{"version":3,"names":["DateMapping","monthsLengthFlags","gy","gm","gd","hijriMonthsLengthFlags","gregorianDate","Date","DatePart","DatePart$1","token","pad","val","locale","len","String","length","localizeNum","format","date","mask","hy","hm","hd","woy","dow","masks","default","_","d","D","m","y","H","M","s","L","W","N","flags","dd","ddd","dayNamesShort","dddd","dayNames","MM","MMM","monthNamesShort","MMMM","monthNames","yy","slice","yyyy","h","hh","HH","mm","ss","l","Math","round","t","timeNames","tt","T","TT","S","localizeDayNum","localizeCommas","replace","match","symbolMap","dayNumMap","ar","name","rtl","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","num","output","i","charAt","section","v","en","UmAlQuraStatic","hijriToGregorian","_checkYearRange","_checkMonthRange","_checkDayRange","nDays","index","minCalendarYear","dt","hijriYearData","b","addDays","getFullYear","getMonth","getDate","gregorianToHijri","_checkMillsRange","getTime","trunc","minDate","millisPerDay","_dayDiff","yh1","mh1","dh1","daysPerThisMonth","addYears","hys","addMonths","hms","_getDatePart","Year","Month","Day","days","getDaysInMonth","_a","_setTime","getHours","getMinutes","getSeconds","getMilliseconds","addWeeks","wks","valueOf","setDate","addTime","value","unit","setHours","setMinutes","setSeconds","setMilliseconds","Error","getDayOfYear","DayOfYear","getDayOfMonth","getDayOfWeek","getDay","getWeekOfYear","firstDayOfYear","startOf","daysToDayOfWeek","ceil","getDaysInYear","getYear","getMonthArray","weeks","month","start","end","endOf","w","floor","day","push","toDate","daysInMonth","isLeapYear","hour","minute","second","millisecond","millisPerSecond","_loadLocale","setLocale","registerLocale","locales","console","warn","part","_getAbsoluteDateUmAlQura","maxCalendarYear","millis","maxDate","other","_initDateMapping","rawData","mapping","millisPerMinute","millisPerHour","UmAlQura","dateOrHy","_date","_hy","_hm","_hd","_setDate","undefined","Object","defineProperty","prototype","get","enumerable","configurable","map","add","subtract","isBefore","thisDate","thatDate","isAfter","isSame","isSameOrBefore","isSameOrAfter","isBetween","from","to","fromInclusive","toInclusive","clone","umalqura","VERSION","$","min","max","times","daysShort","months","monthsShort"],"sources":["/home/awwal-dev/Documents/TECH/Web development/projects/Digital Tasbeeh/node_modules/@umalqura/core/dist/index.esm.js"],"sourcesContent":["var DateMapping = /** @class */ (function () {\r\n    function DateMapping(monthsLengthFlags, gy, gm, gd) {\r\n        this.hijriMonthsLengthFlags = monthsLengthFlags;\r\n        this.gregorianDate = new Date(gy, gm, gd);\r\n    }\r\n    return DateMapping;\r\n}());\n\nvar DatePart;\r\n(function (DatePart) {\r\n    DatePart[DatePart[\"Year\"] = 0] = \"Year\";\r\n    DatePart[DatePart[\"DayOfYear\"] = 1] = \"DayOfYear\";\r\n    DatePart[DatePart[\"Month\"] = 2] = \"Month\";\r\n    DatePart[DatePart[\"Day\"] = 3] = \"Day\";\r\n})(DatePart || (DatePart = {}));\r\nvar DatePart$1 = DatePart;\n\n// Parts of this file are (c) 2007-2009 Steven Levithan <stevenlevithan.com>\r\n// https://github.com/felixge/node-dateformat/blob/master/lib/dateformat.js\r\nvar token = /d{1,4}|M{1,4}|yy(?:yy)?|([HhmsTt])\\1?|[LlSWN]|\"[^\"]*\"|'[^']*'/g;\r\nfunction pad(val, locale, len) {\r\n    val = String(val);\r\n    len = len || 2;\r\n    while (val.length < len) {\r\n        val = '0' + val;\r\n    }\r\n    return locale.localizeNum(val);\r\n}\r\nfunction format(date, mask, locale, hy, hm, hd, woy, dow) {\r\n    mask = String(locale.masks[mask] || mask || locale.masks.default);\r\n    var _ = 'get';\r\n    var d = hd;\r\n    var D = date[_ + 'Day']();\r\n    var m = hm;\r\n    var y = hy;\r\n    var H = date[_ + 'Hours']();\r\n    var M = date[_ + 'Minutes']();\r\n    var s = date[_ + 'Seconds']();\r\n    var L = date[_ + 'Milliseconds']();\r\n    var W = woy;\r\n    var N = dow;\r\n    var flags = {\r\n        d: locale.localizeNum(d),\r\n        dd: pad(d, locale),\r\n        ddd: locale.dayNamesShort[D],\r\n        dddd: locale.dayNames[D],\r\n        M: locale.localizeNum(m),\r\n        MM: pad(m, locale),\r\n        MMM: locale.monthNamesShort[m - 1],\r\n        MMMM: locale.monthNames[m - 1],\r\n        yy: locale.localizeNum(String(y).slice(2)),\r\n        yyyy: locale.localizeNum(y),\r\n        h: locale.localizeNum(H % 12 || 12),\r\n        hh: pad(H % 12 || 12, locale),\r\n        H: locale.localizeNum(H),\r\n        HH: pad(H, locale),\r\n        m: locale.localizeNum(M),\r\n        mm: pad(M, locale),\r\n        s: locale.localizeNum(s),\r\n        ss: pad(s, locale),\r\n        l: pad(L, locale, 3),\r\n        L: pad(Math.round(L / 10), locale),\r\n        t: H < 12 ? locale.timeNames[0] : locale.timeNames[1],\r\n        tt: H < 12 ? locale.timeNames[2] : locale.timeNames[3],\r\n        T: H < 12 ? locale.timeNames[4] : locale.timeNames[5],\r\n        TT: H < 12 ? locale.timeNames[6] : locale.timeNames[7],\r\n        S: locale.localizeDayNum(d),\r\n        W: locale.localizeNum(W),\r\n        N: locale.localizeNum(N),\r\n    };\r\n    return locale.localizeCommas(mask.replace(token, function (match) { return flags[match]; }));\r\n}\n\nvar symbolMap = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];\r\nvar dayNumMap = ['الأول', 'الثاني', 'الثالث', 'الرابع', 'الخامس', 'السادس', 'السابع', 'الثامن', 'التاسع', 'العاشر', 'الحادي عشر'];\r\nvar ar = {\r\n    name: 'ar',\r\n    rtl: true,\r\n    dayNamesShort: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],\r\n    dayNames: ['الأحد', 'الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],\r\n    monthNamesShort: ['محرم', 'صفر', 'ربيع ١', 'ربيع ٢', 'جمادى ١', 'جمادى ٢', 'رجب', 'شعبان', 'رمضان', 'شوال', 'ذو القعدة', 'ذو الحجة'],\r\n    monthNames: ['محرم', 'صفر', 'ربيع الأول', 'ربيع الثاني', 'جمادى الأولى', 'جمادى الآخرة', 'رجب', 'شعبان', 'رمضان', 'شوال', 'ذو القعدة', 'ذو الحجة'],\r\n    timeNames: ['ص', 'م', 'ص', 'م', 'ص', 'م', 'ص', 'م'],\r\n    masks: {\r\n        default: 'ddd dd MMM yyyy HH:mm:ss',\r\n        shortDate: 'yy/M/d',\r\n        mediumDate: 'd MMM, yyyy',\r\n        longDate: 'd MMMM, yyyy',\r\n        fullDate: 'dddd, d MMMM, yyyy',\r\n        shortTime: 'h:mm TT',\r\n        mediumTime: 'h:mm:ss TT',\r\n        longTime: 'h:mm:ss.l TT',\r\n    },\r\n    localizeNum: function (num) {\r\n        var s = String(num);\r\n        var output = '';\r\n        for (var i = 0; i < s.length; i++) {\r\n            output += symbolMap[s.charAt(i)];\r\n        }\r\n        return output;\r\n    },\r\n    localizeDayNum: function (d) {\r\n        var output = '';\r\n        if (d === 11) {\r\n            output = 'الحادي عشر';\r\n        }\r\n        else if (d === 20) {\r\n            output = 'العشرون';\r\n        }\r\n        else if (d === 30) {\r\n            output = 'الثلاثون';\r\n        }\r\n        else {\r\n            output = dayNumMap[d - 1];\r\n        }\r\n        var section = d / 10;\r\n        if (section > 1.1 && section < 2) {\r\n            output = dayNumMap[(d - 1) % 10] + ' عشر';\r\n        }\r\n        else if (section > 2 && section < 3) {\r\n            output = dayNumMap[(d - 1) % 10] + ' والعشرون';\r\n        }\r\n        return output + ' من';\r\n    },\r\n    localizeCommas: function (v) { return v.replace(/,/g, '،'); },\r\n};\n\nvar en = {\r\n    name: 'en',\r\n    dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    monthNamesShort: ['Muh', 'Ṣaf', 'Rab-I', 'Rab-II', 'Jum-I', 'Jum-II', 'Raj', 'Sha', 'Ram', 'Shw', 'Dhū-Q', 'Dhū-Ḥ'],\r\n    monthNames: ['Muharram', 'Ṣafar', 'Rabīʿ al-Awwal', 'Rabīʿ ath-Thānī', 'Jumādá al-Ūlá', 'Jumādá al-Ākhirah', 'Rajab', 'Sha‘bān', 'Ramaḍān', 'Shawwāl', 'Dhū al-Qa‘dah', 'Dhū al-Ḥijjah'],\r\n    timeNames: ['a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'],\r\n    masks: {\r\n        default: 'ddd MMM dd yyyy HH:mm:ss',\r\n        shortDate: 'M/d/yy',\r\n        mediumDate: 'MMM d, yyyy',\r\n        longDate: 'MMMM d, yyyy',\r\n        fullDate: 'dddd, MMMM d, yyyy',\r\n        shortTime: 'h:mm TT',\r\n        mediumTime: 'h:mm:ss TT',\r\n        longTime: 'h:mm:ss.l TT',\r\n    },\r\n    localizeNum: function (num) { return String(num); },\r\n    // @ts-ignore\r\n    localizeDayNum: function (d) { return ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 !== 10) * d % 10]; },\r\n    localizeCommas: function (v) { return v; },\r\n};\n\n/// Calendar support range:\r\n///     Calendar    Minimum     Maximum\r\n///     ==========  ==========  ==========\r\n///     Gregorian   1900/04/30  2077/11/16\r\n///     UmAlQura    1318/01/01  1500/12/30\r\nvar UmAlQuraStatic = /** @class */ (function () {\r\n    function UmAlQuraStatic() {\r\n    }\r\n    /**\r\n     * Coverts the given Hijri date to Gregorian.\r\n     * @param hy The Hijri year\r\n     * @param hm The Hijri month\r\n     * @param hd The Hijri day\r\n     */\r\n    UmAlQuraStatic.hijriToGregorian = function (hy, hm, hd) {\r\n        this._checkYearRange(hy);\r\n        this._checkMonthRange(hm);\r\n        this._checkDayRange(hd);\r\n        var nDays = hd - 1;\r\n        var index = hy - this.minCalendarYear;\r\n        var dt = this.hijriYearData[index].gregorianDate;\r\n        var b = this.hijriYearData[index].hijriMonthsLengthFlags;\r\n        for (var m = 1; m < hm; m++) {\r\n            nDays = nDays + 29 + (b & 1);\r\n            b >>= 1;\r\n        }\r\n        dt = this.addDays(dt, nDays);\r\n        return {\r\n            gy: dt.getFullYear(),\r\n            gm: dt.getMonth(),\r\n            gd: dt.getDate(),\r\n        };\r\n    };\r\n    /**\r\n     * Coverts the given Gregorian date to Hijri year, month and day.\r\n     * @param date The date to be converted\r\n     */\r\n    UmAlQuraStatic.gregorianToHijri = function (date) {\r\n        this._checkMillsRange(date.getTime());\r\n        // Find the index where we should start our search by quessing the Hijri year that we will be in HijriYearInfo.\r\n        // A Hijri year is 354 or 355 days.  Use 355 days so that we will search from a lower index.\r\n        var index = Math.trunc((date.getTime() - this.minDate.getTime()) / this.millisPerDay / 355);\r\n        do {\r\n        } while (date.getTime() > this.hijriYearData[++index].gregorianDate.getTime());\r\n        if (date.getTime() !== this.hijriYearData[index].gregorianDate.getTime()) {\r\n            index--;\r\n        }\r\n        var nDays = this._dayDiff(date, this.hijriYearData[index].gregorianDate);\r\n        var yh1 = index + this.minCalendarYear;\r\n        var mh1 = 1;\r\n        var dh1 = 1;\r\n        var b = this.hijriYearData[index].hijriMonthsLengthFlags;\r\n        var daysPerThisMonth = 29 + (b & 1);\r\n        while (nDays >= daysPerThisMonth) {\r\n            nDays -= daysPerThisMonth;\r\n            b >>= 1;\r\n            daysPerThisMonth = 29 + (b & 1);\r\n            mh1++;\r\n        }\r\n        dh1 += Math.trunc(nDays);\r\n        return {\r\n            hy: yh1,\r\n            hm: mh1,\r\n            hd: dh1,\r\n        };\r\n    };\r\n    /**\r\n     * Adds the specified amount of Hijri years to the given Gregorian date.\r\n     * @param date The date\r\n     * @param hys The Hijri years to be added\r\n     */\r\n    UmAlQuraStatic.addYears = function (date, hys) {\r\n        return this.addMonths(date, hys * 12);\r\n    };\r\n    /**\r\n     * Adds the specified amount of Hijri months to the given Gregorian date.\r\n     * @param date The date\r\n     * @param hms The Hijri months to be added\r\n     */\r\n    UmAlQuraStatic.addMonths = function (date, hms) {\r\n        // Get the date in UmAlQura calendar.\r\n        var y = this._getDatePart(date, DatePart$1.Year);\r\n        var m = this._getDatePart(date, DatePart$1.Month);\r\n        var d = this._getDatePart(date, DatePart$1.Day);\r\n        var i = m - 1 + hms;\r\n        if (i >= 0) {\r\n            m = i % 12 + 1;\r\n            y += Math.trunc(i / 12);\r\n        }\r\n        else {\r\n            m = 12 + (i + 1) % 12;\r\n            y += Math.trunc((i - 11) / 12);\r\n        }\r\n        if (d > 29) {\r\n            var days = this.getDaysInMonth(y, m);\r\n            if (d > days) {\r\n                d = days;\r\n            }\r\n        }\r\n        var _a = this.hijriToGregorian(y, m, d), gy = _a.gy, gm = _a.gm, gd = _a.gd;\r\n        return this._setTime(new Date(gy, gm, gd), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n    };\r\n    /**\r\n     * Adds the specified amount of weeks to the given Gregorian date.\r\n     * @param date The date\r\n     * @param wks The weeks to be added\r\n     */\r\n    UmAlQuraStatic.addWeeks = function (date, wks) {\r\n        return this.addDays(date, wks * 7);\r\n    };\r\n    /**\r\n     * Adds the specified amount of days to the given Gregorian date.\r\n     * @param date The date\r\n     * @param days The days to be added\r\n     */\r\n    UmAlQuraStatic.addDays = function (date, days) {\r\n        var d = new Date(date.valueOf());\r\n        d.setDate(d.getDate() + days);\r\n        return d;\r\n    };\r\n    /**\r\n     * Adds the specified amount of units to the given Gregorian date.\r\n     * @param date The date\r\n     * @param value The amount of `unit`s to add\r\n     * @param unit The unit of time\r\n     */\r\n    UmAlQuraStatic.addTime = function (date, value, unit) {\r\n        var d = new Date(date.valueOf());\r\n        switch (unit) {\r\n            case 'hour':\r\n                d.setHours(d.getHours() + value);\r\n                break;\r\n            case 'minute':\r\n                d.setMinutes(d.getMinutes() + value);\r\n                break;\r\n            case 'second':\r\n                d.setSeconds(d.getSeconds() + value);\r\n                break;\r\n            case 'millisecond':\r\n                d.setMilliseconds(d.getMilliseconds() + value);\r\n                break;\r\n            default:\r\n                throw new Error('Invalid value for `unit` param');\r\n        }\r\n        return d;\r\n    };\r\n    /**\r\n     * Returns the Hijri day of year for the specified Gregorian date.\r\n     * @param date The date\r\n     */\r\n    UmAlQuraStatic.getDayOfYear = function (date) {\r\n        return this._getDatePart(date, DatePart$1.DayOfYear);\r\n    };\r\n    /**\r\n     * Returns the Hijri day of month for the specified Gregorian date.\r\n     * @param date The date\r\n     */\r\n    UmAlQuraStatic.getDayOfMonth = function (date) {\r\n        return this._getDatePart(date, DatePart$1.Day);\r\n    };\r\n    /**\r\n     * Returns the day of week for the specified Gregorian date.\r\n     * @param date The date\r\n     */\r\n    UmAlQuraStatic.getDayOfWeek = function (date) {\r\n        return date.getDay();\r\n    };\r\n    /**\r\n     * Returns the Hijri week of year for the specified Gregorian date.\r\n     * @param date The date\r\n     */\r\n    UmAlQuraStatic.getWeekOfYear = function (date) {\r\n        var firstDayOfYear = this.startOf(date, 'year').getDay();\r\n        var daysToDayOfWeek = firstDayOfYear - date.getDay();\r\n        var d = this.addDays(date, daysToDayOfWeek);\r\n        return Math.ceil(this.getDayOfYear(d) / 7);\r\n    };\r\n    /**\r\n     * Returns the number of days in the specified Hijri year.\r\n     * @param hy The Hijri year\r\n     */\r\n    UmAlQuraStatic.getDaysInYear = function (hy) {\r\n        this._checkYearRange(hy);\r\n        var days = 0;\r\n        var b = this.hijriYearData[hy - this.minCalendarYear].hijriMonthsLengthFlags;\r\n        for (var m = 1; m <= 12; m++) {\r\n            days = days + 29 + (b & 1);\r\n            b >>= 1;\r\n        }\r\n        if (days !== 354 && days !== 355) {\r\n            throw new Error('Days in year assert error. This is possibly a bug.');\r\n        }\r\n        return days;\r\n    };\r\n    /**\r\n     * Returns the number of days in the specified Hijri year and month.\r\n     * @param hy The Hijri year\r\n     * @param hm The Hijri month\r\n     */\r\n    UmAlQuraStatic.getDaysInMonth = function (hy, hm) {\r\n        this._checkYearRange(hy);\r\n        this._checkMonthRange(hm);\r\n        if ((this.hijriYearData[hy - this.minCalendarYear].hijriMonthsLengthFlags & (1 << hm - 1)) === 0) {\r\n            return 29;\r\n        }\r\n        else {\r\n            return 30;\r\n        }\r\n    };\r\n    /**\r\n     * Returns the Hijri year corresponding to the given Gregorian date.\r\n     * @param date The date\r\n     */\r\n    UmAlQuraStatic.getYear = function (date) {\r\n        return this._getDatePart(date, DatePart$1.Year);\r\n    };\r\n    /**\r\n     * Returns the Hijri month corresponding to the given Gregorian date.\r\n     * @param date The date\r\n     */\r\n    UmAlQuraStatic.getMonth = function (date) {\r\n        return this._getDatePart(date, DatePart$1.Month);\r\n    };\r\n    /**\r\n     * Returns the Hijri month array for the given Gregorian date.\r\n     * @param date The date\r\n     */\r\n    UmAlQuraStatic.getMonthArray = function (date) {\r\n        var weeks = [];\r\n        var month = this.getMonth(date);\r\n        var start = this.startOf(this.startOf(date, 'month'), 'week');\r\n        var end = this.endOf(this.endOf(date, 'month'), 'week');\r\n        var i = 0;\r\n        while (start < end) {\r\n            var w = Math.floor(i / 7);\r\n            var day = new Date(start.valueOf());\r\n            weeks[w] = weeks[w] || [];\r\n            weeks[w].push(this.getMonth(day) === month ? day : null);\r\n            start.setDate(start.getDate() + 1);\r\n            i++;\r\n        }\r\n        return weeks;\r\n    };\r\n    /**\r\n     * Returns the Gregorian date corresponding to the Hijri date starting at the specified unit of time.\r\n     * @param date: The date\r\n     * @param unit: The unit of time\r\n     */\r\n    UmAlQuraStatic.startOf = function (date, unit) {\r\n        var d = new Date(date);\r\n        var _a = this.gregorianToHijri(d), hy = _a.hy, hm = _a.hm;\r\n        switch (unit) {\r\n            case 'year':\r\n                return this.toDate(hy, 1, 1, 0, 0, 0, 0);\r\n            case 'month':\r\n                return this.toDate(hy, hm, 1, 0, 0, 0, 0);\r\n            case 'week':\r\n                var dow = this.getDayOfWeek(d);\r\n                d = this.addDays(d, -dow);\r\n            case 'day':\r\n                d.setHours(0);\r\n            case 'hour':\r\n                d.setMinutes(0);\r\n            case 'minute':\r\n                d.setSeconds(0);\r\n            case 'second':\r\n                d.setMilliseconds(0);\r\n                break;\r\n            default:\r\n                throw new Error('Invalid value for `unit` param');\r\n        }\r\n        return d;\r\n    };\r\n    /**\r\n     * Returns the Gregorian date corresponding to the Hijri date ending at the specified unit of time.\r\n     * @param date: The date\r\n     * @param unit: The unit of time\r\n     */\r\n    UmAlQuraStatic.endOf = function (date, unit) {\r\n        var d = new Date(date);\r\n        var _a = this.gregorianToHijri(d), hy = _a.hy, hm = _a.hm;\r\n        var daysInMonth;\r\n        switch (unit) {\r\n            case 'year':\r\n                daysInMonth = this.getDaysInMonth(hy, 12);\r\n                return this.toDate(hy, 12, daysInMonth, 23, 59, 59, 999);\r\n            case 'month':\r\n                daysInMonth = this.getDaysInMonth(hy, hm);\r\n                return this.toDate(hy, hm, daysInMonth, 23, 59, 59, 999);\r\n            case 'week':\r\n                var dow = this.getDayOfWeek(d);\r\n                d = this.addDays(d, 6 - dow);\r\n            case 'day':\r\n                d.setHours(23);\r\n            case 'hour':\r\n                d.setMinutes(59);\r\n            case 'minute':\r\n                d.setSeconds(59);\r\n            case 'second':\r\n                d.setMilliseconds(999);\r\n                break;\r\n            default:\r\n                throw new Error('Invalid value for `unit` param');\r\n        }\r\n        return d;\r\n    };\r\n    /**\r\n     * Returns whether or not the given Hijri year is a leap year.\r\n     * A Hijri leap year is where the number of days in that year is 355.\r\n     * @param hy The Hijri year\r\n     */\r\n    UmAlQuraStatic.isLeapYear = function (hy) {\r\n        return this.getDaysInYear(hy) === 355;\r\n    };\r\n    /**\r\n     * Converts the specified Hijri date time to a Gregorian Date instance.\r\n     * @param hy The Hijri year\r\n     * @param hm The Hijri month\r\n     * @param hd The Hijri day\r\n     * @param hour The Hour component\r\n     * @param minute The Minute component\r\n     * @param second The Second component\r\n     * @param millisecond The Millisecond component\r\n     */\r\n    UmAlQuraStatic.toDate = function (hy, hm, hd, hour, minute, second, millisecond) {\r\n        if (hour === void 0) { hour = 0; }\r\n        if (minute === void 0) { minute = 0; }\r\n        if (second === void 0) { second = 0; }\r\n        if (millisecond === void 0) { millisecond = 0; }\r\n        var daysInMonth = this.getDaysInMonth(hy, hm);\r\n        if (hd < 1 || hd > daysInMonth) {\r\n            throw new Error(\"Invalid value for day for the given year/month. Day must be between 1 and \" + daysInMonth + \".\");\r\n        }\r\n        if (hour < 0 || hour >= 24 || minute < 0 || minute >= 60 || second < 0 || second >= 60 || millisecond < 0 || millisecond >= this.millisPerSecond) {\r\n            throw new Error('Invalid value for hour, minute, second or millisecond.');\r\n        }\r\n        var _a = this.hijriToGregorian(hy, hm, hd), gy = _a.gy, gm = _a.gm, gd = _a.gd;\r\n        return this._setTime(new Date(gy, gm, gd), hour, minute, second, millisecond);\r\n    };\r\n    /**\r\n     * Formats the specified Gregorian Date instance in Hijri date.\r\n     * @param date The date\r\n     * @param mask The format mask\r\n     * @param locale The locale to use. If omitted, uses the globally set locale or the default locale.\r\n     */\r\n    UmAlQuraStatic.format = function (date, mask, locale) {\r\n        var _a = this.gregorianToHijri(date), hy = _a.hy, hm = _a.hm, hd = _a.hd;\r\n        return format(date, mask, locale ? this._loadLocale(locale) : this.locale, hy, hm, hd, this.getWeekOfYear(date), this.getDayOfWeek(date));\r\n    };\r\n    /**\r\n     * Sets global locale to be used for formatting.\r\n     * @param locale The locale\r\n     */\r\n    UmAlQuraStatic.setLocale = function (locale) {\r\n        this.locale = this._loadLocale(locale);\r\n    };\r\n    /**\r\n     * Registers the specified locale.\r\n     * @param locale The locale\r\n     */\r\n    UmAlQuraStatic.registerLocale = function (locale) {\r\n        if (!locale.name) {\r\n            throw new Error(\"The locale's 'name' property must not be empty.\");\r\n        }\r\n        if (this.locales[locale.name]) {\r\n            throw new Error(\"A locale with the same name '\" + locale.name + \"' is already registered.\");\r\n        }\r\n        this.locales[locale.name] = locale;\r\n    };\r\n    UmAlQuraStatic._loadLocale = function (locale) {\r\n        if (this.locales[locale]) {\r\n            return this.locales[locale];\r\n        }\r\n        console.warn(\"The requested locale '\" + locale + \"' could not be found. Using the default locale instead.\");\r\n        return en;\r\n    };\r\n    UmAlQuraStatic._getDatePart = function (date, part) {\r\n        var _a = this.gregorianToHijri(date), hy = _a.hy, hm = _a.hm, hd = _a.hd;\r\n        switch (part) {\r\n            case DatePart$1.Year:\r\n                return hy;\r\n            case DatePart$1.Month:\r\n                return hm;\r\n            case DatePart$1.Day:\r\n                return hd;\r\n            case DatePart$1.DayOfYear:\r\n                return Math.trunc(this._getAbsoluteDateUmAlQura(hy, hm, hd) - this._getAbsoluteDateUmAlQura(hy, 1, 1) + 1);\r\n        }\r\n    };\r\n    UmAlQuraStatic._setTime = function (date, hour, minute, second, millisecond) {\r\n        date.setHours(hour);\r\n        date.setMinutes(minute);\r\n        date.setSeconds(second);\r\n        date.setMilliseconds(millisecond);\r\n        return date;\r\n    };\r\n    UmAlQuraStatic._getAbsoluteDateUmAlQura = function (hy, hm, hd) {\r\n        var _a = this.hijriToGregorian(hy, hm, hd), gy = _a.gy, gm = _a.gm, gd = _a.gd;\r\n        return new Date(gy, gm, gd).getTime() / this.millisPerDay;\r\n    };\r\n    UmAlQuraStatic._checkYearRange = function (hy) {\r\n        if (hy < this.minCalendarYear || hy > this.maxCalendarYear) {\r\n            throw new Error(\"Invalid value for year. Must be between \" + this.minCalendarYear + \" and \" + this.maxCalendarYear + \".\");\r\n        }\r\n    };\r\n    UmAlQuraStatic._checkMonthRange = function (hm) {\r\n        if (hm < 1 || hm > 12) {\r\n            throw new Error(\"Invalid value for month. Must be between 1 and 12.\");\r\n        }\r\n    };\r\n    UmAlQuraStatic._checkDayRange = function (day) {\r\n        if (day < 1 || day > 30) {\r\n            throw new Error(\"Invalid value for day. Must be between 1 and 30.\");\r\n        }\r\n    };\r\n    UmAlQuraStatic._checkMillsRange = function (millis) {\r\n        if (millis < this.minDate.getTime() || millis > this.maxDate.getTime()) {\r\n            throw new Error(\"Invalid value for epoch. Must be between \" + this.minDate.getTime() + \" and \" + this.maxDate.getTime() + \".\");\r\n        }\r\n    };\r\n    UmAlQuraStatic._dayDiff = function (date, other) {\r\n        return (date.getTime() - other.getTime()) / (1000 * 60 * 60 * 24);\r\n    };\r\n    UmAlQuraStatic._initDateMapping = function () {\r\n        var rawData = [\r\n            // This data is auto generated from the .net BCL which seemed the most accurate\r\n            // Other source which have been found having abnormalities include:\r\n            // http://www.staff.science.uu.nl/~gent0113/islam/addfiles/islamcalendar_dat.js - Has 28 days in one of the month which is impossible\r\n            // http://www.ummulqura.org.sa/ - Has several inaccurate dates\r\n            // Generated by /personal-proj/umalqura/data-gen\r\n            /*  DaysPerM  GY   GM  GD      D1   D2   D3   D4   D5   D6   D7   D8   D9   D10  D11  D12\r\n            1318*/ 0x02EA, 1900, 4, 30,\r\n            0x06E9, 1901, 4, 19,\r\n            0x0ED2, 1902, 4, 9,\r\n            0x0EA4, 1903, 3, 30,\r\n            0x0D4A, 1904, 3, 18,\r\n            0x0A96, 1905, 3, 7,\r\n            0x0536, 1906, 2, 24,\r\n            0x0AB5, 1907, 2, 13,\r\n            0x0DAA, 1908, 2, 3,\r\n            0x0BA4, 1909, 1, 23,\r\n            0x0B49, 1910, 1, 12,\r\n            0x0A93, 1911, 1, 1,\r\n            0x052B, 1911, 12, 21,\r\n            0x0A57, 1912, 12, 9,\r\n            0x04B6, 1913, 11, 29,\r\n            0x0AB5, 1914, 11, 18,\r\n            0x05AA, 1915, 11, 8,\r\n            0x0D55, 1916, 10, 27,\r\n            0x0D2A, 1917, 10, 17,\r\n            0x0A56, 1918, 10, 6,\r\n            0x04AE, 1919, 9, 25,\r\n            0x095D, 1920, 9, 13,\r\n            0x02EC, 1921, 9, 3,\r\n            0x06D5, 1922, 8, 23,\r\n            0x06AA, 1923, 8, 13,\r\n            0x0555, 1924, 8, 1,\r\n            0x04AB, 1925, 7, 21,\r\n            0x095B, 1926, 7, 10,\r\n            0x02BA, 1927, 6, 30,\r\n            0x0575, 1928, 6, 18,\r\n            0x0BB2, 1929, 6, 8,\r\n            0x0764, 1930, 5, 29,\r\n            0x0749, 1931, 5, 18,\r\n            0x0655, 1932, 5, 6,\r\n            0x02AB, 1933, 4, 25,\r\n            0x055B, 1934, 4, 14,\r\n            0x0ADA, 1935, 4, 4,\r\n            0x06D4, 1936, 3, 24,\r\n            0x0EC9, 1937, 3, 13,\r\n            0x0D92, 1938, 3, 3,\r\n            0x0D25, 1939, 2, 20,\r\n            0x0A4D, 1940, 2, 9,\r\n            0x02AD, 1941, 1, 28,\r\n            0x056D, 1942, 1, 17,\r\n            0x0B6A, 1943, 1, 7,\r\n            0x0B52, 1943, 12, 28,\r\n            0x0AA5, 1944, 12, 16,\r\n            0x0A4B, 1945, 12, 5,\r\n            0x0497, 1946, 11, 24,\r\n            0x0937, 1947, 11, 13,\r\n            0x02B6, 1948, 11, 2,\r\n            0x0575, 1949, 10, 22,\r\n            0x0D6A, 1950, 10, 12,\r\n            0x0D52, 1951, 10, 2,\r\n            0x0A96, 1952, 9, 20,\r\n            0x092D, 1953, 9, 9,\r\n            0x025D, 1954, 8, 29,\r\n            0x04DD, 1955, 8, 18,\r\n            0x0ADA, 1956, 8, 7,\r\n            0x05D4, 1957, 7, 28,\r\n            0x0DA9, 1958, 7, 17,\r\n            0x0D52, 1959, 7, 7,\r\n            0x0AAA, 1960, 6, 25,\r\n            0x04D6, 1961, 6, 14,\r\n            0x09B6, 1962, 6, 3,\r\n            0x0374, 1963, 5, 24,\r\n            0x0769, 1964, 5, 12,\r\n            0x0752, 1965, 5, 2,\r\n            0x06A5, 1966, 4, 21,\r\n            0x054B, 1967, 4, 10,\r\n            0x0AAB, 1968, 3, 29,\r\n            0x055A, 1969, 3, 19,\r\n            0x0AD5, 1970, 3, 8,\r\n            0x0DD2, 1971, 2, 26,\r\n            0x0DA4, 1972, 2, 16,\r\n            0x0D49, 1973, 2, 4,\r\n            0x0A95, 1974, 1, 24,\r\n            0x052D, 1975, 1, 13,\r\n            0x0A5D, 1976, 1, 2,\r\n            0x055A, 1976, 12, 22,\r\n            0x0AD5, 1977, 12, 11,\r\n            0x06AA, 1978, 12, 1,\r\n            0x0695, 1979, 11, 20,\r\n            0x052B, 1980, 11, 8,\r\n            0x0A57, 1981, 10, 28,\r\n            0x04AE, 1982, 10, 18,\r\n            0x0976, 1983, 10, 7,\r\n            0x056C, 1984, 9, 26,\r\n            0x0B55, 1985, 9, 15,\r\n            0x0AAA, 1986, 9, 5,\r\n            0x0A55, 1987, 8, 25,\r\n            0x04AD, 1988, 8, 13,\r\n            0x095D, 1989, 8, 2,\r\n            0x02DA, 1990, 7, 23,\r\n            0x05D9, 1991, 7, 12,\r\n            0x0DB2, 1992, 7, 1,\r\n            0x0BA4, 1993, 6, 21,\r\n            0x0B4A, 1994, 6, 10,\r\n            0x0A55, 1995, 5, 30,\r\n            0x02B5, 1996, 5, 18,\r\n            0x0575, 1997, 5, 7,\r\n            0x0B6A, 1998, 4, 27,\r\n            0x0BD2, 1999, 4, 17,\r\n            0x0BC4, 2000, 4, 6,\r\n            0x0B89, 2001, 3, 26,\r\n            0x0A95, 2002, 3, 15,\r\n            0x052D, 2003, 3, 4,\r\n            0x05AD, 2004, 2, 21,\r\n            0x0B6A, 2005, 2, 10,\r\n            0x06D4, 2006, 1, 31,\r\n            0x0DC9, 2007, 1, 20,\r\n            0x0D92, 2008, 1, 10,\r\n            0x0AA6, 2008, 12, 29,\r\n            0x0956, 2009, 12, 18,\r\n            0x02AE, 2010, 12, 7,\r\n            0x056D, 2011, 11, 26,\r\n            0x036A, 2012, 11, 15,\r\n            0x0B55, 2013, 11, 4,\r\n            0x0AAA, 2014, 10, 25,\r\n            0x094D, 2015, 10, 14,\r\n            0x049D, 2016, 10, 2,\r\n            0x095D, 2017, 9, 21,\r\n            0x02BA, 2018, 9, 11,\r\n            0x05B5, 2019, 8, 31,\r\n            0x05AA, 2020, 8, 20,\r\n            0x0D55, 2021, 8, 9,\r\n            0x0A9A, 2022, 7, 30,\r\n            0x092E, 2023, 7, 19,\r\n            0x026E, 2024, 7, 7,\r\n            0x055D, 2025, 6, 26,\r\n            0x0ADA, 2026, 6, 16,\r\n            0x06D4, 2027, 6, 6,\r\n            0x06A5, 2028, 5, 25,\r\n            0x054B, 2029, 5, 14,\r\n            0x0A97, 2030, 5, 3,\r\n            0x054E, 2031, 4, 23,\r\n            0x0AAE, 2032, 4, 11,\r\n            0x05AC, 2033, 4, 1,\r\n            0x0BA9, 2034, 3, 21,\r\n            0x0D92, 2035, 3, 11,\r\n            0x0B25, 2036, 2, 28,\r\n            0x064B, 2037, 2, 16,\r\n            0x0CAB, 2038, 2, 5,\r\n            0x055A, 2039, 1, 26,\r\n            0x0B55, 2040, 1, 15,\r\n            0x06D2, 2041, 1, 4,\r\n            0x0EA5, 2041, 12, 24,\r\n            0x0E4A, 2042, 12, 14,\r\n            0x0A95, 2043, 12, 3,\r\n            0x052D, 2044, 11, 21,\r\n            0x0AAD, 2045, 11, 10,\r\n            0x036C, 2046, 10, 31,\r\n            0x0759, 2047, 10, 20,\r\n            0x06D2, 2048, 10, 9,\r\n            0x0695, 2049, 9, 28,\r\n            0x052D, 2050, 9, 17,\r\n            0x0A5B, 2051, 9, 6,\r\n            0x04BA, 2052, 8, 26,\r\n            0x09BA, 2053, 8, 15,\r\n            0x03B4, 2054, 8, 5,\r\n            0x0B69, 2055, 7, 25,\r\n            0x0B52, 2056, 7, 14,\r\n            0x0AA6, 2057, 7, 3,\r\n            0x04B6, 2058, 6, 22,\r\n            0x096D, 2059, 6, 11,\r\n            0x02EC, 2060, 5, 31,\r\n            0x06D9, 2061, 5, 20,\r\n            0x0EB2, 2062, 5, 10,\r\n            0x0D54, 2063, 4, 30,\r\n            0x0D2A, 2064, 4, 18,\r\n            0x0A56, 2065, 4, 7,\r\n            0x04AE, 2066, 3, 27,\r\n            0x096D, 2067, 3, 16,\r\n            0x0D6A, 2068, 3, 5,\r\n            0x0B54, 2069, 2, 23,\r\n            0x0B29, 2070, 2, 12,\r\n            0x0A93, 2071, 2, 1,\r\n            0x052B, 2072, 1, 21,\r\n            0x0A57, 2073, 1, 9,\r\n            0x0536, 2073, 12, 30,\r\n            0x0AB5, 2074, 12, 19,\r\n            0x06AA, 2075, 12, 9,\r\n            0x0E93, 2076, 11, 27,\r\n            0, 2077, 11, 17 /* 0    0    0    0    0    0    0    0    0    0    0    0    2077-11-17*/\r\n        ];\r\n        var mapping = [];\r\n        for (var i = 0; i < rawData.length / 4; i++) {\r\n            mapping.push(new DateMapping(rawData[i * 4], rawData[i * 4 + 1], rawData[i * 4 + 2] - 1, rawData[i * 4 + 3]));\r\n        }\r\n        return mapping;\r\n    };\r\n    // private static readonly maxSeconds = 9223372036854775807 / 10000000;\r\n    // private static readonly minSeconds = -9223372036854775807 / 10000000;\r\n    UmAlQuraStatic.millisPerSecond = 1000;\r\n    UmAlQuraStatic.millisPerMinute = UmAlQuraStatic.millisPerSecond * 60;\r\n    UmAlQuraStatic.millisPerHour = UmAlQuraStatic.millisPerMinute * 60;\r\n    UmAlQuraStatic.millisPerDay = UmAlQuraStatic.millisPerHour * 24;\r\n    UmAlQuraStatic.minDate = new Date(1900, 3, 30);\r\n    UmAlQuraStatic.maxDate = new Date(2077, 10, 16, 23, 59, 59, 999);\r\n    UmAlQuraStatic.hijriYearData = UmAlQuraStatic._initDateMapping();\r\n    // Holds globally set locale\r\n    UmAlQuraStatic.locale = en;\r\n    // Holds registered locales\r\n    UmAlQuraStatic.locales = {};\r\n    UmAlQuraStatic.minCalendarYear = 1318;\r\n    UmAlQuraStatic.maxCalendarYear = 1500;\r\n    return UmAlQuraStatic;\r\n}());\r\n// Register both locales so they'll be bundled in the package.\r\n// This is fine since for this library, there will probably be\r\n// only be these two locales.\r\nUmAlQuraStatic.registerLocale(ar);\r\nUmAlQuraStatic.registerLocale(en);\n\nvar UmAlQura = /** @class */ (function () {\r\n    function UmAlQura(dateOrHy, hm, hd, hour, minute, second, millisecond) {\r\n        if (hour === void 0) { hour = 0; }\r\n        if (minute === void 0) { minute = 0; }\r\n        if (second === void 0) { second = 0; }\r\n        if (millisecond === void 0) { millisecond = 0; }\r\n        this._date = new Date(0, 0, 0);\r\n        this._hy = 0;\r\n        this._hm = 0;\r\n        this._hd = 0;\r\n        if (dateOrHy instanceof Date) {\r\n            this._setDate(dateOrHy);\r\n        }\r\n        else if (dateOrHy !== undefined && hm !== undefined && hd !== undefined) {\r\n            var _a = UmAlQuraStatic.hijriToGregorian(dateOrHy, hm, hd), gy = _a.gy, gm = _a.gm, gd = _a.gd;\r\n            this._setDate(new Date(gy, gm, gd, hour, minute, second, millisecond));\r\n        }\r\n        else {\r\n            this._setDate(new Date());\r\n        }\r\n    }\r\n    Object.defineProperty(UmAlQura.prototype, \"date\", {\r\n        /**\r\n         * Returns the `Date` object of this instance.\r\n         */\r\n        get: function () { return new Date(this._date.valueOf()); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"hy\", {\r\n        /**\r\n         * Returns the Hijri year of this instance.\r\n         */\r\n        get: function () { return this._hy; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"hm\", {\r\n        /**\r\n         * Returns the Hijri month of this instance.\r\n         */\r\n        get: function () { return this._hm; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"hd\", {\r\n        /**\r\n         * Returns the Hijri day of month of this instance.\r\n         */\r\n        get: function () { return this._hd; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"dayOfYear\", {\r\n        /**\r\n         * Returns the Hijri day of year of this instance.\r\n         */\r\n        get: function () { return UmAlQuraStatic.getDayOfYear(this.date); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"dayOfWeek\", {\r\n        /**\r\n         * Returns the day of week of this instance.\r\n         */\r\n        get: function () { return UmAlQuraStatic.getDayOfWeek(this.date); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"weekOfYear\", {\r\n        /**\r\n         * Returns the Hijri week of year of this instance.\r\n         */\r\n        get: function () { return UmAlQuraStatic.getWeekOfYear(this.date); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"daysInYear\", {\r\n        /**\r\n         * Returns the number of days in year of this instance.\r\n         */\r\n        get: function () { return UmAlQuraStatic.getDaysInYear(this.hy); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"daysInMonth\", {\r\n        /**\r\n         * Returns the number of days in month of this instance.\r\n         */\r\n        get: function () { return UmAlQuraStatic.getDaysInMonth(this.hy, this.hm); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"isLeapYear\", {\r\n        /**\r\n         * Returns whether or not the Hijri year of this instance is a leap year.\r\n         */\r\n        get: function () { return UmAlQuraStatic.isLeapYear(this.hy); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(UmAlQura.prototype, \"monthArray\", {\r\n        /**\r\n         * Returns the Hijri month array of this instance.\r\n         */\r\n        get: function () {\r\n            return UmAlQuraStatic.getMonthArray(this.date)\r\n                .map(function (w) { return w.map(function (d) { return d ? new UmAlQura(d) : null; }); });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds the specified amount of `unit` to the current date and returns a new instance.\r\n     * @param {number} value The amount of units to be added\r\n     * @param {UnitOfTimeMs} unit The unit of time\r\n     */\r\n    UmAlQura.prototype.add = function (value, unit) {\r\n        switch (unit) {\r\n            case 'year':\r\n                return new UmAlQura(UmAlQuraStatic.addYears(this.date, value));\r\n            case 'month':\r\n                return new UmAlQura(UmAlQuraStatic.addMonths(this.date, value));\r\n            case 'week':\r\n                return new UmAlQura(UmAlQuraStatic.addWeeks(this.date, value));\r\n            case 'day':\r\n                return new UmAlQura(UmAlQuraStatic.addDays(this.date, value));\r\n            case 'hour':\r\n            case 'minute':\r\n            case 'second':\r\n            case 'millisecond':\r\n                return new UmAlQura(UmAlQuraStatic.addTime(this.date, value, unit));\r\n            default:\r\n                throw new Error('Invalid value for `unit`');\r\n        }\r\n    };\r\n    /**\r\n     * Subtracts the specified amount of `unit` from the current date and returns a new instance.\r\n     * @param {number} value The amount of units to be subtracted\r\n     * @param {UnitOfTimeMs} unit The unit of time\r\n     */\r\n    UmAlQura.prototype.subtract = function (value, unit) {\r\n        return this.add(value * -1, unit);\r\n    };\r\n    /**\r\n     * Returns a new instance having the Hijri date of this instance starting at the specified unit of time.\r\n     * @param {UnitOfTime} unit The unit of time\r\n     */\r\n    UmAlQura.prototype.startOf = function (unit) {\r\n        return new UmAlQura(UmAlQuraStatic.startOf(this.date, unit));\r\n    };\r\n    /**\r\n     * Returns a new instance having the Hijri date of this instance ending at the specified unit of time.\r\n     * @param {UnitOfTime} unit The unit of time\r\n     */\r\n    UmAlQura.prototype.endOf = function (unit) {\r\n        return new UmAlQura(UmAlQuraStatic.endOf(this.date, unit));\r\n    };\r\n    /**\r\n     * Checks if current date is before the specified date. The comparison is made based on milliseconds of both\r\n     * times. This can be changed by specifying a value for the `unit` parameter.\r\n     * @param {(UmAlQura | Date)} other The date to compare against\r\n     * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n     */\r\n    UmAlQura.prototype.isBefore = function (other, unit) {\r\n        if (unit === void 0) { unit = 'millisecond'; }\r\n        var thisDate = this.date;\r\n        var thatDate = other instanceof Date ? other : other.date;\r\n        if (unit === 'millisecond') {\r\n            return thisDate.valueOf() < thatDate.valueOf();\r\n        }\r\n        else {\r\n            return this.endOf(unit).date.valueOf() < thatDate.valueOf();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if current date is after the specified date. The comparison is made based on milliseconds,\r\n     * this can be changed by specifying a value for the `unit` parameter.\r\n     * @param {(UmAlQura | Date)} other The date to compare against\r\n     * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n     */\r\n    UmAlQura.prototype.isAfter = function (other, unit) {\r\n        if (unit === void 0) { unit = 'millisecond'; }\r\n        var thisDate = this.date;\r\n        var thatDate = other instanceof Date ? other : other.date;\r\n        if (unit === 'millisecond') {\r\n            return thisDate.valueOf() > thatDate.valueOf();\r\n        }\r\n        else {\r\n            return this.startOf(unit).date.valueOf() > thatDate.valueOf();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if current date is same as the specified date. The comparison is made based on milliseconds,\r\n     * this can be changed by specifying a value for the `unit` parameter.\r\n     * @param {(UmAlQura | Date)} other The date to compare against\r\n     * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n     */\r\n    UmAlQura.prototype.isSame = function (other, unit) {\r\n        if (unit === void 0) { unit = 'millisecond'; }\r\n        var thisDate = this.date;\r\n        var thatDate = other instanceof Date ? other : other.date;\r\n        if (unit === 'millisecond') {\r\n            return thisDate.valueOf() === thatDate.valueOf();\r\n        }\r\n        else {\r\n            return this.startOf(unit).date.valueOf() === new UmAlQura(thatDate).startOf(unit).date.valueOf();\r\n        }\r\n    };\r\n    /**\r\n     * Checks if current date is same as or before the specified date. The comparison is made based on milliseconds,\r\n     * this can be changed by specifying a value for the `unit` parameter.\r\n     * @param {(UmAlQura | Date)} other The date to compare against\r\n     * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n     */\r\n    UmAlQura.prototype.isSameOrBefore = function (other, unit) {\r\n        if (unit === void 0) { unit = 'millisecond'; }\r\n        return this.isSame(other, unit) || this.isBefore(other, unit);\r\n    };\r\n    /**\r\n     * Checks if current date is same as or after the specified date. The comparison is made based on milliseconds,\r\n     * this can be changed by specifying a value for the `unit` parameter.\r\n     * @param {(UmAlQura | Date)} other The date to compare against\r\n     * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n     */\r\n    UmAlQura.prototype.isSameOrAfter = function (other, unit) {\r\n        if (unit === void 0) { unit = 'millisecond'; }\r\n        return this.isSame(other, unit) || this.isAfter(other, unit);\r\n    };\r\n    /**\r\n     * Checks if current date is between the specified `from`/`to` dates. The comparison is made based on milliseconds,\r\n     * this can be changed by specifying a value for the `unit` parameter. The comparison is exclusive of both ends by default,\r\n     * this can be controller by `fromInclusive`/`toInclusive` parameters.\r\n     * @param {(UmAlQura | Date)} from The lower bound date\r\n     * @param {(UmAlQura | Date)} to The higher bound date\r\n     * @param {boolean} [fromInclusive=false] Whether lower bound is inclusive, defaults to false.\r\n     * @param {boolean} [toInclusive=false] Whether upper bound is inclusive, defaults to false.\r\n     * @param {UnitOfTimeMs} [unit='millisecond'] The unit of time\r\n     */\r\n    UmAlQura.prototype.isBetween = function (from, to, fromInclusive, toInclusive, unit) {\r\n        if (fromInclusive === void 0) { fromInclusive = false; }\r\n        if (toInclusive === void 0) { toInclusive = false; }\r\n        if (unit === void 0) { unit = 'millisecond'; }\r\n        return (fromInclusive ? this.isSameOrAfter(from, unit) : this.isAfter(from, unit)) &&\r\n            (toInclusive ? this.isSameOrBefore(to, unit) : this.isBefore(to, unit));\r\n    };\r\n    /**\r\n     * Formats this instance in Hijri date.\r\n     * @param {string} mask The mask\r\n     * @param {string} locale The locale to use. If omitted, uses  the locale set via `locale` or the default locale.\r\n     */\r\n    UmAlQura.prototype.format = function (mask, locale) {\r\n        // tslint:disable-next-line:no-string-literal\r\n        return UmAlQuraStatic.format(this.date, mask, locale || UmAlQuraStatic['locale'].name);\r\n    };\r\n    /**\r\n     * Clones this instance and returns a new instance with the same values.\r\n     */\r\n    UmAlQura.prototype.clone = function () {\r\n        return new UmAlQura(this.date);\r\n    };\r\n    UmAlQura.prototype._setDate = function (date) {\r\n        var _a = UmAlQuraStatic.gregorianToHijri(date), hy = _a.hy, hm = _a.hm, hd = _a.hd;\r\n        this._date = new Date(date.valueOf());\r\n        this._hy = hy;\r\n        this._hm = hm;\r\n        this._hd = hd;\r\n    };\r\n    return UmAlQura;\r\n}());\n\nfunction umalqura(dateOrHy, hm, hd, hour, minute, second, millisecond) {\r\n    if (hour === void 0) { hour = 0; }\r\n    if (minute === void 0) { minute = 0; }\r\n    if (second === void 0) { second = 0; }\r\n    if (millisecond === void 0) { millisecond = 0; }\r\n    if (dateOrHy instanceof Date) {\r\n        return new UmAlQura(dateOrHy);\r\n    }\r\n    else if (dateOrHy !== undefined && hm !== undefined && hd !== undefined) {\r\n        return new UmAlQura(dateOrHy, hm, hd, hour, minute, second, millisecond);\r\n    }\r\n    else {\r\n        return new UmAlQura();\r\n    }\r\n}\r\n/**\r\n * Returns the library version.\r\n */\r\numalqura.VERSION = \"0.0.7\";\r\n/**\r\n * Returns a class which exposes static Hijri related functions.\r\n */\r\numalqura.$ = UmAlQuraStatic;\r\n/**\r\n * Returns the minimum supported Hijri date.\r\n */\r\numalqura.min = umalqura(UmAlQuraStatic['minCalendarYear'], 1, 1);\r\n/**\r\n * Returns the maximum supported Hijri date.\r\n */\r\numalqura.max = umalqura(UmAlQuraStatic['maxCalendarYear'], 1, 1).endOf('year');\r\n/**\r\n * Gets or sets the global locale\r\n  * @param locale The locale to set. If omitted, returns the current locale\r\n */\r\numalqura.locale = function (locale) { return locale ? UmAlQuraStatic.setLocale(locale) : UmAlQuraStatic['locale'].name; };\r\n/**\r\n * Returns whether the currently set locale is RTL or not.\r\n */\r\numalqura.rtl = function () { return !!UmAlQuraStatic['locale'].rtl; };\r\n/**\r\n * Returns the times names using the currently set locale.\r\n */\r\numalqura.times = function () { return UmAlQuraStatic['locale'].timeNames.slice(); };\r\n/**\r\n * Returns the days names using the currently set locale.\r\n */\r\numalqura.days = function () { return UmAlQuraStatic['locale'].dayNames.slice(); };\r\n/**\r\n * Returns the days short names using the currently set locale.\r\n */\r\numalqura.daysShort = function () { return UmAlQuraStatic['locale'].dayNamesShort.slice(); };\r\n/**\r\n * Returns the months names using the currently set locale.\r\n */\r\numalqura.months = function () { return UmAlQuraStatic['locale'].monthNames.slice(); };\r\n/**\r\n * Returns the months short names using the currently set locale.\r\n */\r\numalqura.monthsShort = function () { return UmAlQuraStatic['locale'].monthNamesShort.slice(); };\r\n/**\r\n * Returns the localized number for the given number using the currently set locale.\r\n */\r\numalqura.localizeNum = function (num) { return UmAlQuraStatic['locale'].localizeNum(num); };\r\n/**\r\n * Returns the localized day number for the given day number using the currently set locale.\r\n */\r\numalqura.localizeDayNum = function (d) { return UmAlQuraStatic['locale'].localizeDayNum(d); };\n\nexport default umalqura;\n"],"mappings":"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E,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EACpB,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAClB,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,EACnB,MA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}